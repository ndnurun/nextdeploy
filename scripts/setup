#!/bin/bash --login
#
# Setup script for install mvmc platform into local computer
# @author Eric Fehr (eric.fehr@publicis-modem.fr, @github: ricofehr)

EMAIL='admin@mvmc-openstack.local'
PASSWORD='wordpass123123'
DOMAIN=''
DEBUG=1
BINSED='/bin/sed'
OUT="$(pwd)/out/setup.log"
YES=0
MVMCSUF='os.mvmc'
MVMCURI='mvmc.local'
GITLABURI='gitlab.local'
PUBPREFIX='192.168.171'
HOSTOS=""
DNSIP="${PUBPREFIX}.60"
HVISOR=""
DESTROYVM=1
CHANGEDNS=1


# display help
mvmchelp() {
  cat <<EOF
Usage: $0 [options]

-h           this is some help text.
-c           no destroy vm already created
-q           quieter mode
-y           ask yes to all questions
-g           gitlaburi (default is gitlab.local)
-hv          hypervisor: vbox or kvm (default is vbox)
-p           subnet prefix for vms (default is 192.168.171)
-n           dns server for vms (default is 192.168.171.60)
-m           mvmc webui URI (default is mvmc.local)
-s           mvmc dns suffixes (default is os.mvmc)
-r           avoid change resolv.conf file
EOF

exit 0
}


# Parse cmd options
while (($# > 0)); do
  case "$1" in
    -c)
      shift
      DESTROYVM=0
      ;;
    -d)
      shift
      DEBUG=2
      ;;
    -q)
      shift
      DEBUG=0
      ;;
    -y)
      shift
      YES=1
      ;;
    -g)
      shift
      GITLABURI="$1"
      shift
      ;;
    -hv)
      shift
      HVISOR="$1"
      shift
      ;;
    -h)
      shift
      mvmchelp
      ;;
    -p)
      shift
      PUBPREFIX="$1"
      DNSIP="${PUBPREFIX}.60"
      shift
      ;;
    -n)
      shift
      DNSIP="$1"
      shift
      ;;
    -m)
      shift
      MVMCURI="$1"
      shift
      ;;
    -r)
      shift
      CHANGEDNS=0
      ;;
    -s)
      shift
      MVMCSUF="$1"
      shift
      ;;
    *)
      mvmchelp
      shift
      ;;
  esac
done

# Format MVMCURI and GITLABURI
MVMCURI="${MVMCURI#http://}"
MVMCURI="${MVMCURI%/}"
GITLABURI="${GITLABURI#http://}"
GITLABURI="${GITLABURI%/}"

# Clean log file
rm -f "${OUT}"

# If high debug, show all commands output
((DEBUG==2)) && OUT=''

# Redirect output to log file
if [[ -n "$OUT" ]]; then
  exec 3>&1 4>&2 1>>$OUT 2>&1
fi

# Include some usable functions
source scripts/inc/utils

# clone submodules
install_submodules() {
  if [[ -f ror/public/javascripts/application.js ]]; then
    rm -f ror/public/javascripts/application.js
    rmdir ror/public/javascripts
    rmdir ror/public
  fi
  git submodule update --init
}

# Make ruby install
install_ruby() {
  # test if rvm and ruby are already installed
  rvm list 2>/dev/null | grep 2.1.0 >/dev/null
  (($?==0)) && return

  output -q 'Ruby Installation ...'
  curl -sSL https://get.rvm.io | bash
  (($?!=0)) && output -e 'Rvm installation has failed'

  source ~/.rvm/scripts/rvm
  rvm get stable --auto-dotfiles
  rvm reload
  rvm install 2.1.0
  (($?!=0)) && output -e 'Ruby installation has failed'

  rvm use ruby-2.1.0
  gem install bundler
  (($?!=0)) && output -e 'Bundler installation has failed'
}

# nodejs install
install_nodejs() {
  output -q 'Nodejs Installation ...'
  curl https://raw.githubusercontent.com/creationix/nvm/v0.23.3/install.sh | bash
  (($?!=0)) && output -w 'Nvm installation has failed or was already done before'

  source ~/.nvm/nvm.sh
  nvm install 0.10.33
  (($?!=0)) && output -w 'Node installation has failed'
  nvm use 0.10.33
}

# setup ruby-client with default values
install_client() {
  output -q "Ruby Client Installation ..."
  install_ruby
  rvm use ruby-2.1.0
  pushd client > /dev/null
  bundle install
  (($?!=0)) && output -w 'Client installation has failed'
  popd > /dev/null

  output -l "Client Setting File /etc/mvmc.conf"
  sudo /bin/bash -c "echo \"email: ${EMAIL}\" > /etc/mvmc.conf"
  sudo /bin/bash -c "echo \"password: ${PASSWORD}\" >> /etc/mvmc.conf"
  sudo /bin/bash -c "echo \"endpoint: ${MVMCURI}\" >> /etc/mvmc.conf"
}

# Add mvmc platform uris into hosts file
file_hosts() {
  output -q "Added 2 lines in /etc/hosts file"
  sudo $BINSED -i "s;^192.168.170.60.*;;" /etc/hosts
  sudo $BINSED -i "s;^192.168.170.70.*;;" /etc/hosts
  sudo /bin/bash -c "echo \"192.168.170.60 mvmc.local gitlab.local doc.mvmc.local\" >> /etc/hosts"
  sudo /bin/bash -c "echo \"192.168.170.70 uosc${DOMAIN}\" >> /etc/hosts"
}

# Some intoduction words
welcome_step() {
  output -q -l "Welcome to setup process for mvmc platform in local environment"
  output -q -l "Remember, the project needs lot of ram for running in virtualisation mode on local workstation computer"
  output -q -l "At least 8Go are needed and 12Go are recommended"
  output -q -l "The installation process needs long time (at least 90min), needs curl command and ask sometimes root password (assume that sudo command is installed)"
  confirm "Ok for continue"
  echo -en "\n\n"
}

# check operatingsystem
check_os() {
  output -q "Check operating systems..."

  if [[ -f /etc/debian_version ]]; then
    source scripts/inc/setup_debian
    output -l "Your system is a Debian or Ubuntu"
    HOSTOS="debian"
  elif [[ -f /usr/bin/sw_vers ]]; then
    source scripts/inc/setup_osx
    BINSED='/usr/local/bin/gsed'
    output -l "Your system is a MacOs"
    HOSTOS="macos"
  elif [[ -f /etc/fedora-release ]]; then
    source scripts/inc/setup_fedora
    output -l "Your system is a Fedora"
    HOSTOS="fedora"
  else
    output -e 'Needs macos, debian-like or fedora operating system'
  fi

  output -q 'Operating System is ok'
}

install_prerequisites() {
  output -q -l "Install prerequisites on your System ? (y/n)"
  if ((YES==1)); then
    response="y"
  else
    read response
  fi

  [[ "$response" = "n" ]] && return

  # init HVISOR var
  if [[ -z "$HVISOR" ]]; then
    output -q -l "Which targeted hypervisor on your system ? (kvm/virtualbox)"
    if ((YES==1)); then
      echo "virtualbox"
      HVISOR="virtualbox"
    else
      read HVISOR
    fi
  fi

  # if wrong HVISOR, set to vbox
  if [[ "$HVISOR" = "kvm" ]]; then
    HVISOR="libvirt"
  else
    HVISOR="virtualbox"
  fi

  # some specific os packages
  install_specific_os
  # install_ruby
  install_git
  if [[ "$HVISOR" = "virtualbox" ]]; then
    install_vbox
  else
    install_kvm
  fi
  install_vagrant
  ip_forward
}

# Prepare vagrantfiles and global.yaml
preparefiles() {
  output -q "Prepare vagrantfile for openstack nodes"
  pushd vagrant/os > /dev/null
  rm -f Vagrantfile
  cp vagrantfiles/${HVISOR}.dist Vagrantfile
  (($?!=0)) && output -e 'Cant create Vagrantfile for openstack nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSPUBSUF%%;${PUBPREFIX##*.};" Vagrantfile
  popd > /dev/null

  output -q "Prepare vagrantfile for manager node"
  pushd vagrant/mvmc > /dev/null
  rm -f Vagrantfile
  cp vagrantfiles/${HVISOR}.dist Vagrantfile
  (($?!=0)) && output -e 'Cant create Vagrantfile for mvmc node'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSPUBSUF%%;${PUBPREFIX##*.};" Vagrantfile
  # on fedora, we set rsync type for avoir firewalld issue
  if [[ "$HOSTOS" = "fedora" ]]; then
    $BINSED -i "s;%%FILESHARETYPE%%;rsync;" Vagrantfile
    rm -f puppet/pm/files/sshkeys
  else
    $BINSED -i "s;%%FILESHARETYPE%%;nfs;" Vagrantfile
  fi
  popd > /dev/null

  output -q "Prepare hiera global.yml for openstack nodes"
  pushd vagrant/os/hiera > /dev/null
  rm -f global.yaml
  cp global.yaml.dist global.yaml
  (($?!=0)) && output -e 'Cant create global.yml for openstack nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" global.yaml
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" global.yaml
  $BINSED -i "s;%%MVMCSUF%%;${MVMCSUF};" global.yaml
  $BINSED -i "s;%%GITLABURI%%;${GITLABURI};" global.yaml
  $BINSED -i "s;%%GITLABNS%%;${GITLABURI%%/*};" global.yaml
  popd > /dev/null

  output -q "Prepare hiera global.yml for mvmc node"
  pushd vagrant/mvmc/hiera > /dev/null
  rm -f global.yaml
  cp global.yaml.dist global.yaml
  (($?!=0)) && output -e 'Cant create global.yml for mvmc nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" global.yaml
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" global.yaml
  $BINSED -i "s;%%MVMCSUF%%;${MVMCSUF};" global.yaml
  $BINSED -i "s;%%GITLABURI%%;${GITLABURI};" global.yaml
  $BINSED -i "s;%%GITLABNS%%;${GITLABURI%%/*};" global.yaml
  popd > /dev/null

  output -q "Prepare rails development.rb settings file"
  pushd ror/config/environments > /dev/null
  rm -f  development.rb
  cp development.rb.dist development.rb
  (($?!=0)) && output -e 'Cant create development.rb'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" development.rb
  $BINSED -i "s;%%MVMCSUF%%;${MVMCSUF};" development.rb
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" development.rb
  $BINSED -i "s;%%GITLABURI%%;${GITLABURI};" development.rb
  popd > /dev/null
}

# Start vms for create mvmc platform
start_vms() {
  output -q "Start vagrant vms"

  preparefiles

  # local domain are difficult to manage with vagrant
  cp /etc/resolv.conf tmp/resolv.conf.mvmc
  sudo $BINSED -i "s;search.*$;;" /etc/resolv.conf
  sudo $BINSED -i "s;domain.*$;;" /etc/resolv.conf

  pushd vagrant/os/hiera > /dev/null
  rm -f uos*
  ln -s os/uosc.yaml uosc${DOMAIN}.yaml
  ln -s os/uosnv_${HVISOR}.yaml uosnv${DOMAIN}.yaml
  ln -s os/uosnt.yaml uosnt${DOMAIN}.yaml
  ln -s os/uosst.yaml uosst${DOMAIN}.yaml
  popd > /dev/null

  pushd vagrant/os > /dev/null
  if ((DESTROYVM==1)) && [[ -d .vagrant ]]; then
    output -q -l "Do you want to Destroy old openstack vm created ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    if [[ "$response" = "y" ]]; then
      vagrant destroy -f
      (($?!=0)) && output -w 'Destroy openstack nodes has failed'
      rm -rf .vagrant
    fi
  fi

  output -q "Creating openstack controller vm, please wait a moment..."
  vagrant up --provider=${HVISOR}
  (($?!=0)) && output -e 'Controller creation has failed'
  output -q "Openstack controller is up"

  output -q "Creating openstack neutron (network node) vm, please wait a moment..."
  vagrant up uosnt --provider=${HVISOR}
  (($?!=0)) && output -e 'Neutron creation has failed'
  output -q "Openstack neutron is up"

  output -q "Creating openstack glance (image node) vm, please wait a moment..."
  vagrant up uosst --provider=${HVISOR}
  (($?!=0)) && output -e 'Glance creation has failed'
  output -q "Openstack glance is up"

  output -q "Creating openstack nova (compute node) vm, please wait a moment..."
  vagrant up uosnv --provider=${HVISOR}
  (($?!=0)) && output -e 'Nova creation has failed'
  output -q "Openstack nova is up"
  popd > /dev/null

  # Delete old private_token value before up mvmc vm
  rm -f ror/tmp/private_token

  # Clean hiera symlinks
  pushd vagrant/mvmc/hiera > /dev/null
  rm -f mvmc.*
  ln -s mvmc/mvmc.yaml mvmc${DOMAIN}.yaml
  popd > /dev/null

  pushd vagrant/mvmc > /dev/null
  if ((DESTROYVM==1)) && [[ -d .vagrant ]]; then
    output -q -l "Do you want to Destroy old manager vm created ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    if [[ "$response" = "y" ]]; then
      vagrant destroy -f
      (($?!=0)) && output -w 'Destroy manager node has failed'
      rm -rf .vagrant
    fi
  fi

  output -q "Creating the manager vm, please wait a moment ..."
  vagrant up --provider=${HVISOR}
  (($?!=0)) && output -e 'Manager node creation has some error(s)'
  # ensure that rails app is up
  sleep 300
  output -q "The manager instance is up"
  popd > /dev/null

  # init HVISOR var
  if ((CHANGEDNS==1)); then
    output -q -l "Change your dns server to the manager mvmc node (for resolve $MVMCSUF uri) ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    [[ "$response" = "y" ]] && set_dnsserver "$DNSIP"
  fi
}

# Some conclusions words.
# List all useful uris
complete_step() {
  output -q "Installation of Mvmc platform is Complete"
  output -q -l "Manager: http://${MVMCURI}/"
  output -q -l "Openstack WebUI: http://uosc${DOMAIN}/"
  output -q -l "Gitlab WebUI: http://${GITLABURI}/"
  output -q -l "Rails Documentation: http://doc.${MVMCURI}/"
}


welcome_step
install_submodules
check_os
install_prerequisites
start_vms
file_hosts
install_client
complete_step
