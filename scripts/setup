#!/bin/bash --login
#
# Setup script for install mvmc platform into local computer
# @author Eric Fehr (eric.fehr@publicis-modem.fr, @github: ricofehr)

CLIEMAIL='usera@os.mvmc' # user for mvmc client cli
CLIPASSWORD='word123123' # password for mvmc client cli
MAILADMIN='admin@example.com' # mailadmin used for some alerts purpose
ADMINPASSWORD='admin' # admin password used for some webui (like grafana)
DOMAIN='' # local domain for dhcp zone. DEPRECATED
DEBUG=1 # debug level
BINSED='/bin/sed' # path for gnu sed command
OUT="$(pwd)/out/setup.log" # path for output log
YES=0 # set yes to all questions
MVMCSUF='os.mvmc' # suffix for mvmc dns endpoints
MVMCURI='mvmc.local' # endpoint for mvmc webui
MC2URI='mc2.local' # endpoint for mc2 node
GITLABURI='gitlab.local' # endpoint for gitlab webui
PUBPREFIX='192.168.171' # subnet prefix for external network
MANAGEMENTPREFIX='172.16.170' # subnet prefix for manaegment network into openstack cloud
APIPREFIX='192.168.170' # subnet prefix for api netwok into openstack cloud
DATAPREFIX='172.16.171' # subnet prefix for data netwok into openstack cloud
HOSTOS="" # local operating system (debian / fedora / macos)
DNSIP="${PUBPREFIX}.60" # dns server for openstack virtual machines
HVISOR="" # hypervisor type
DESTROYVM=1 # destroy all vm before reinstall them
CHANGEDNS=1 # change local resolv.conf file for match mvmc dns zones
NESTED=0 # enable nested virtualization for nova node
NEUTRONEXTDEV='eth2' # neutron interface who set the external network ip
NEUTRONPUBDEV='eth0' # neutron interface who set the public IP
FILESHARETYPE='virtualbox' # define which sharing strategy for rails app between host computer and mvmc virtual node
STARTVM=0 # start a test vm after build complete

# display help
mvmchelp() {
  cat <<EOF
Usage: $0 [options]

-h           this is some help text.
-c           no destroy vm already created
-q           quieter mode
-y           ask yes to all question
-fs xxxx     fileshare strategy for rails app source between host and mvmc node, nfs/rsync (Default is nfs for libvirt and virtualbox for vbox)
-cu xxxx     cli username (default is usera@os.mvmc)
-cp xxxx     cli password (default is word123123)
-g xxxx      gitlaburi (default is gitlab.local)
-hv xxxx     hypervisor: virtualbox or libvirt (default is virtualbox)
-nv          enable nested virtualisation for nova (default is off), EXPERIMENTAL
-ne xxxx     set the neutron external interface (for the public openstack subnet, default is eth2)
-np xxxx     set the neutron public interface (default is eth0)
-p xxxx      subnet prefix (external network) for vms (default is 192.168.171)
-a xxxx      subnet prefix for api network (default is 192.168.170)
-d xxxx      subnet prefix for data network (default is 172.16.171)
-e xxxx      subnet prefix for management network (default is 172.16.170)
-n xxxx      dns server for vms (default is 192.168.171.60)
-m xxxx      mvmc webui URI (default is mvmc.local)
-mc xxxx     mc2 default URI (default is mc2.local)
-ma xxxx     an email for some alerts purpose (default is admin@example.com)
-pa xxxx     admin password used for some webui (like grafana)
-s xxxx      mvmc dns suffixes (default is os.mvmc)
-r           avoid change resolv.conf and hosts files
-vm          start a vm after build is complete
EOF

exit 0
}


# Parse cmd options
while (($# > 0)); do
  case "$1" in
    -cp)
      shift
      CLIPASSWORD="$1"
      shift
      ;;
    -cu)
      shift
      CLIEMAIL="$1"
      shift
      ;;
    -fs)
      shift
      FILESHARETYPE="$1"
      shift
      ;;
    -hv)
      shift
      HVISOR="$1"
      # make nfs default filesharetype for libvirt hvisor
      [[ $HVISOR != "virtualbox" ]] && [[ $FILESHARETYPE = "virtualbox" ]] && FILESHARETYPE="nfs"
      shift
      ;;
    -ne)
      shift
      NEUTRONEXTDEV="$1"
      shift
      ;;
    -np)
      shift
      NEUTRONPUBDEV="$1"
      shift
      ;;
    -nv)
      shift
      NESTED=1
      ;;
    -vm)
      shift
      STARTVM=1
      ;;
    -c)
      shift
      DESTROYVM=0
      ;;
    -d)
      shift
      DEBUG=2
      ;;
    -q)
      shift
      DEBUG=0
      ;;
    -y)
      shift
      YES=1
      ;;
    -g)
      shift
      GITLABURI="$1"
      shift
      ;;
    -h)
      shift
      mvmchelp
      ;;
    -p)
      shift
      PUBPREFIX="$1"
      DNSIP="${PUBPREFIX}.60"
      shift
      ;;
    -a)
      shift
      APIPREFIX="$1"
      shift
      ;;
    -d)
      shift
      DATAPREFIX="$1"
      shift
      ;;
    -e)
      shift
      MANAGEMENTPREFIX="$1"
      shift
      ;;
    -n)
      shift
      DNSIP="$1"
      shift
      ;;
    -m)
      shift
      MVMCURI="$1"
      shift
      ;;
    -mc)
      shift
      MC2URI="$1"
      shift
      ;;
    -ma)
      shift
      MAILADMIN="$1"
      shift
      ;;
    -pa)
      shift
      ADMINPASSWORD="$1"
      shift
      ;;
    -r)
      shift
      CHANGEDNS=0
      ;;
    -s)
      shift
      MVMCSUF="$1"
      shift
      ;;
    *)
      mvmchelp
      shift
      ;;
  esac
done

# Format MVMCURI and GITLABURI and MC2URI
MVMCURI="${MVMCURI#http://}"
MVMCURI="${MVMCURI%/}"
GITLABURI="${GITLABURI#http://}"
GITLABURI="${GITLABURI%/}"
MC2URI="${MC2URI#http://}"
MC2URI="${MC2URI%/}"

# Clean log file
rm -f "${OUT}"

# If high debug, show all commands output
((DEBUG==2)) && OUT=''

# Redirect output to log file
if [[ -n "$OUT" ]]; then
  exec 3>&1 4>&2 1>>$OUT 2>&1
fi

# Include some usable functions
source scripts/inc/utils

# clone submodules
install_submodules() {
  if [[ -f ror/public/javascripts/application.js ]]; then
    rm -f ror/public/javascripts/application.js
    rmdir ror/public/javascripts
    rmdir ror/public
  fi
  git submodule update --init --recursive
}

# Make ruby install
install_ruby() {
  # test if rvm and ruby are already installed
  rvm gemset list 2>/dev/null | grep mvmc >/dev/null
  if (($?==0)); then
    rvm use ruby-2.1.0@mvmc
    return
  fi

  output -q 'Ruby Installation ...'
  curl -sSL https://get.rvm.io | bash -s stable
  (($?!=0)) && output -e 'Rvm installation has failed'

  source ~/.rvm/scripts/rvm
  rvm get stable --auto-dotfiles
  rvm reload
  rvm install 2.1.0
  (($?!=0)) && output -e 'Ruby installation has failed'

  rvm gemset create mvmc
  rvm use ruby-2.1.0@mvmc
  gem install bundler
  (($?!=0)) && output -e 'Bundler installation has failed'
}

# setup ruby-client with default values
install_client() {
  output -q "Mvmc Client Installation ..."
  rvm use ruby-2.1.0@mvmc
  pushd client > /dev/null
  ./install.sh
  (($?!=0)) && output -w 'Client installation has failed'
  popd > /dev/null

  output -l "Client Setting File ~/.mvmc.conf"
  mvmc config ${MVMCURI} ${CLIEMAIL} ${CLIPASSWORD}
}

# start a vm on the first project into list
start_vm() {
  output -l "Start a vm for project $(mvmc projects | head -n 1 | tr -d "\n")"
  mvmc launch "$(mvmc projects | head -n 1 | tr -d "\n")"
  (($?!=0)) && output -e 'Vm start has failed'
}

# Add mvmc platform uris into hosts file
file_hosts() {
  output -q "Added 3 lines in /etc/hosts file"
  sudo $BINSED -i "s;^192.168.170.50.*;;" /etc/hosts
  sudo $BINSED -i "s;^192.168.170.60.*;;" /etc/hosts
  sudo $BINSED -i "s;^192.168.170.70.*;;" /etc/hosts
  sudo /bin/bash -c "echo \"192.168.170.50 grafana.${MVMCURI} ossec.${MVMCURI}\" >> /etc/hosts"
  sudo /bin/bash -c "echo \"192.168.170.60 ${MVMCURI} ${GITLABURI} doc.${MVMCURI} f.${MVMCURI}\" >> /etc/hosts"
  sudo /bin/bash -c "echo \"192.168.170.70 uosc${DOMAIN}\" >> /etc/hosts"
}

# Some intoduction words
welcome_step() {
  output -q -l "Welcome to setup process for mvmc platform in local environment"
  output -q -l "Remember, the project needs lot of ram for running in virtualisation mode on local workstation computer"
  output -q -l "At least 12Go are needed and 16Go are recommended"
  output -q -l "The installation process needs long time (at least 90min), needs curl command and ask sometimes root password (assume that sudo command is installed)"
  confirm "Ok for continue"
  echo -en "\n\n"
}

# check operatingsystem
check_os() {
  output -q "Check operating systems..."

  if [[ -f /etc/debian_version ]]; then
    source scripts/inc/setup_debian
    output -l "Your system is a Debian or Ubuntu"
    HOSTOS="debian"
  elif [[ -f /usr/bin/sw_vers ]]; then
    source scripts/inc/setup_osx
    BINSED='/usr/local/bin/gsed'
    output -l "Your system is a MacOs"
    HOSTOS="macos"
  elif [[ -f /etc/fedora-release ]]; then
    source scripts/inc/setup_fedora
    output -l "Your system is a Fedora"
    HOSTOS="fedora"
    FILESHARETYPE="rsync"
  else
    output -e 'Needs macos, debian-like or fedora operating system'
  fi

  output -q 'Operating System is ok'
}

# install some prerequisites for the local operating system
install_prerequisites() {
  output -q -l "Install prerequisites on your System ? (y/n)"
  if ((YES==1)); then
    response="y"
  else
    read response
  fi

  [[ "$response" = "n" ]] && return

  # init HVISOR var
  if [[ -z "$HVISOR" ]]; then
    output -q -l "Which targeted hypervisor on your system ? (libvirt/virtualbox)"
    if ((YES==1)); then
      HVISOR="virtualbox"
    else
      read HVISOR
    fi
  fi

  # force virtualbox if other than libvirt
  [[ "$HVISOR" != "libvirt" ]] && HVISOR="virtualbox"

  # some specific os packages
  install_specific_os
  # install_ruby and git
  install_ruby
  install_git
  # install hypervisor
  if [[ "$HVISOR" = "virtualbox" ]]; then
    install_vbox
  else
    install_kvm
  fi
  install_vagrant
  ip_forward
}

# Prepare vagrantfiles and global.yaml
preparefiles() {
  output -q "Prepare vagrantfile for openstack nodes"
  pushd vagrant/os > /dev/null
  rm -f Vagrantfile
  cp vagrantfiles/${HVISOR}.dist Vagrantfile
  (($?!=0)) && output -e 'Cant create Vagrantfile for openstack nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSPUBSUF%%;${PUBPREFIX##*.};" Vagrantfile
  $BINSED -i "s;%%DATAPREFIX%%;${DATAPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSDATASUF%%;${DATAPREFIX##*.};" Vagrantfile
  $BINSED -i "s;%%APIPREFIX%%;${APIPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSAPISUF%%;${APIPREFIX##*.};" Vagrantfile
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${MANAGEMENTPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSMANAGEMENTSUF%%;${MANAGEMENTPREFIX##*.};" Vagrantfile
  if ((NESTED==1)); then
    $BINSED -i "s;%%NESTED%%;true;" Vagrantfile
  else
    $BINSED -i "s;%%NESTED%%;false;" Vagrantfile
  fi
  popd > /dev/null

  output -q "Prepare vagrantfile for manager node"
  pushd vagrant/mvmc > /dev/null
  rm -f Vagrantfile
  cp vagrantfiles/${HVISOR}.dist Vagrantfile
  (($?!=0)) && output -e 'Cant create Vagrantfile for mvmc node'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSPUBSUF%%;${PUBPREFIX##*.};" Vagrantfile
  $BINSED -i "s;%%DATAPREFIX%%;${DATAPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSDATASUF%%;${DATAPREFIX##*.};" Vagrantfile
  $BINSED -i "s;%%APIPREFIX%%;${APIPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSAPISUF%%;${APIPREFIX##*.};" Vagrantfile
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${MANAGEMENTPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSMANAGEMENTSUF%%;${MANAGEMENTPREFIX##*.};" Vagrantfile
  # on fedora, we set rsync type for avoir firewalld issue
  $BINSED -i "s;%%FILESHARETYPE%%;${FILESHARETYPE};" Vagrantfile
  # fix an issue when rsync share
  rm -f puppet/pm/files/sshkeys
  popd > /dev/null

  output -q "Prepare vagrantfile for mc2 node"
  pushd vagrant/mc2 > /dev/null
  rm -f Vagrantfile
  cp vagrantfiles/${HVISOR}.dist Vagrantfile
  (($?!=0)) && output -e 'Cant create Vagrantfile for mc2 node'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" Vagrantfile
  $BINSED -i "s;%%OSPUBSUF%%;${PUBPREFIX##*.};" Vagrantfile
  # on fedora, we set rsync type for avoir firewalld issue
  $BINSED -i "s;%%FILESHARETYPE%%;${FILESHARETYPE};" Vagrantfile
  popd > /dev/null

  output -q "Prepare hiera global.yml for openstack nodes"
  pushd vagrant/os/hiera > /dev/null
  rm -f global.yaml
  cp global.yaml.dist global.yaml
  (($?!=0)) && output -e 'Cant create global.yml for openstack nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" global.yaml
  $BINSED -i "s;%%DATAPREFIX%%;${DATAPREFIX};" global.yaml
  $BINSED -i "s;%%APIPREFIX%%;${APIPREFIX};" global.yaml
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${MANAGEMENTPREFIX};" global.yaml
  $BINSED -i "s;%%EXTDEV%%;${NEUTRONEXTDEV};" global.yaml
  $BINSED -i "s;%%PUBDEV%%;${NEUTRONPUBDEV};" global.yaml
  if ((NESTED==1)); then
    $BINSED -i "s;%%NOVAHV%%;kvm;" global.yaml
  else
    $BINSED -i "s;%%NOVAHV%%;qemu;" global.yaml
  fi
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" global.yaml
  $BINSED -i "s;%%MVMCSUF%%;${MVMCSUF};" global.yaml
  $BINSED -i "s;%%GITLABURI%%;${GITLABURI};" global.yaml
  $BINSED -i "s;%%GITLABNS%%;${GITLABURI%%/*};" global.yaml
  popd > /dev/null

  output -q "Prepare hiera global.yml for mvmc node"
  pushd vagrant/mvmc/hiera > /dev/null
  rm -f global.yaml
  cp global.yaml.dist global.yaml
  (($?!=0)) && output -e 'Cant create global.yml for mvmc nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" global.yaml
  $BINSED -i "s;%%DATAPREFIX%%;${DATAPREFIX};" global.yaml
  $BINSED -i "s;%%APIPREFIX%%;${APIPREFIX};" global.yaml
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${MANAGEMENTPREFIX};" global.yaml
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" global.yaml
  $BINSED -i "s;%%MVMCSUF%%;${MVMCSUF};" global.yaml
  $BINSED -i "s;%%GITLABURI%%;${GITLABURI};" global.yaml
  $BINSED -i "s;%%GITLABNS%%;${GITLABURI%%/*};" global.yaml
  $BINSED -i "s;%%RAILSENV%%;development;" global.yaml
  popd > /dev/null

  output -q "Prepare hiera global.yml for mc2 node"
  pushd vagrant/mc2/hiera > /dev/null
  rm -f global.yaml
  cp global.yaml.dist global.yaml
  (($?!=0)) && output -e 'Cant create global.yml for mc2 nodes'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" global.yaml
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" global.yaml
  $BINSED -i "s;%%MAILADMIN%%;${MAILADMIN};" global.yaml
  $BINSED -i "s;%%ADMINPASSWORD%%;${ADMINPASSWORD};" global.yaml
  popd > /dev/null

  output -q "Prepare default.vcl for mc2 node"
  pushd vagrant/modules/pm/files/varnish/custom > /dev/null
  rm -f default.vcl.*
  cp ../default.vcl.mc2 default.vcl_mc2
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" default.vcl_mc2
  popd > /dev/null

  output -q "Prepare rails development.rb settings file"
  pushd ror/config/environments > /dev/null
  rm -f  development.rb
  cp development.rb.dist development.rb
  (($?!=0)) && output -e 'Cant create development.rb'
  $BINSED -i "s;%%PUBPREFIX%%;${PUBPREFIX};" development.rb
  $BINSED -i "s;%%MVMCSUF%%;${MVMCSUF};" development.rb
  $BINSED -i "s;%%MVMCURI%%;${MVMCURI};" development.rb
  $BINSED -i "s;%%GITLABNS%%;${GITLABURI%%/*};" development.rb
  popd > /dev/null
}

# Start vms for create mvmc platform
install_mvmc() {
  output -q "Start vagrant vms"

  preparefiles

  # local domain are difficult to manage with vagrant
  cp /etc/resolv.conf tmp/resolv.conf.mvmc
  sudo $BINSED -i "s;search.*$;;" /etc/resolv.conf
  sudo $BINSED -i "s;domain.*$;;" /etc/resolv.conf

  # Clean hiera symlinks
  pushd vagrant/mc2/hiera > /dev/null
  rm -f mc2.*
  ln -s mc2/mc2.yaml mc2${DOMAIN}.yaml
  popd > /dev/null

  pushd vagrant/mc2 > /dev/null
  if ((DESTROYVM==1)) && [[ -d .vagrant ]]; then
    output -q -l "Do you want to Destroy old mc2 vm created ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    if [[ "$response" = "y" ]]; then
      vagrant destroy -f
      (($?!=0)) && output -w 'Destroy mc2 node has failed'
      rm -rf .vagrant
    fi
  fi

  output -q "Creating the mc2 vm, please wait a moment ..."
  vagrant up --provider=${HVISOR}
  (($?!=0)) && output -e 'Mc2 node creation has some error(s)'
  output -q "The mc2 manager instance is up"
  popd > /dev/null

  pushd vagrant/os/hiera > /dev/null
  rm -f uos*
  ln -s os/uosc.yaml uosc${DOMAIN}.yaml
  ln -s os/uosnv.yaml uosnv${DOMAIN}.yaml
  ln -s os/uosnt.yaml uosnt${DOMAIN}.yaml
  ln -s os/uosst.yaml uosst${DOMAIN}.yaml
  popd > /dev/null

  pushd vagrant/os > /dev/null
  if ((DESTROYVM==1)) && [[ -d .vagrant ]]; then
    output -q -l "Do you want to Destroy old openstack vm created ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    if [[ "$response" = "y" ]]; then
      vagrant destroy -f
      (($?!=0)) && output -w 'Destroy openstack nodes has failed'
      rm -rf .vagrant
    fi
  fi

  # reload kvm module for avoid permission issue and ensure that nested virt is enable
  if [[ "$HVISOR" = "libvirt" ]]; then
    # wait than vm are well detroyed
    sleep 10
    kvm_reload
  fi

  output -q "Creating openstack controller vm, please wait a moment..."
  vagrant up --provider=${HVISOR}
  (($?!=0)) && output -e 'Controller creation has failed'
  output -q "Openstack controller is up"

  output -q "Creating openstack neutron (network node) vm, please wait a moment..."
  vagrant up uosnt --provider=${HVISOR}
  (($?!=0)) && output -e 'Neutron creation has failed'
  output -q "Openstack neutron is up"

  output -q "Creating openstack glance (image node) vm, please wait a moment..."
  vagrant up uosst --provider=${HVISOR}
  (($?!=0)) && output -e 'Glance creation has failed'
  output -q "Openstack glance is up"

  output -q "Creating openstack nova (compute node) vm, please wait a moment..."
  vagrant up uosnv --provider=${HVISOR}
  (($?!=0)) && output -e 'Nova creation has failed'
  output -q "Openstack nova is up"
  popd > /dev/null

  # Delete old private_token value before up mvmc vm
  rm -f ror/tmp/private_token

  # Clean hiera symlinks
  pushd vagrant/mvmc/hiera > /dev/null
  rm -f mvmc.*
  ln -s mvmc/mvmc.yaml mvmc${DOMAIN}.yaml
  popd > /dev/null

  pushd vagrant/mvmc > /dev/null
  if ((DESTROYVM==1)) && [[ -d .vagrant ]]; then
    output -q -l "Do you want to Destroy old manager vm created ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    if [[ "$response" = "y" ]]; then
      vagrant destroy -f
      (($?!=0)) && output -w 'Destroy manager node has failed'
      rm -rf .vagrant
    fi
  fi

  output -q "Creating the manager vm, please wait a moment ..."
  vagrant up --provider=${HVISOR}
  (($?!=0)) && output -e 'Manager node creation has some error(s)'
  sleep 200
  output -q "The manager instance is up"
  popd > /dev/null

  # init HVISOR var
  if ((CHANGEDNS==1)); then
    output -q -l "Change your dns server to the manager mvmc node (for resolve $MVMCSUF uri) and the hosts file for manage local endpoint ? (y/n)"
    if ((YES==1)); then
      response="y"
    else
      read response
    fi

    if [[ "$response" = "y" ]]; then
      set_dnsserver "$DNSIP"
      file_hosts
    fi
  fi
}

# Some conclusions words.
# List all useful uris
complete_step() {
  output -q "Installation of Mvmc platform is Complete"
  output -q -l "Manager: http://${MVMCURI}/"
  output -q -l "Openstack WebUI: http://uosc${DOMAIN}/"
  output -q -l "Gitlab WebUI: http://${GITLABURI}/"
  output -q -l "Ossec WebUI: http://ossec.${MVMCURI}/"
  output -q -l "Grafana WebUI: http://grafana.${MVMCURI}/"
  output -q -l "Rails Documentation: http://doc.${MVMCURI}/"
  output -q -l "Assets Ftp: f.${MVMCURI}"
}


welcome_step
install_submodules
check_os
install_prerequisites
install_mvmc
install_client
((STARTVM==1)) && start_vm
complete_step
