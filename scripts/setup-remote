#!/bin/bash
#
# Setup script for install mvmc platform on remote servers
# @author Eric Fehr (eric.fehr@publicis-modem.fr, @github: ricofehr)

PUPPETIP=''
PUPPETIP2=''
PUPPETFQDN=''
PUPPETPORT=8114
OUT='out/remote.log'
BINSED='/bin/sed'
YES=0
DEBUG=1
DOMAIN=''

# use gsed if macosx
[[ -f /usr/bin/sw_vers ]] && BINSED='/usr/local/bin/gsed'

source scripts/inc/utils

# Redirect output to log file
if [[ -n "$OUT" ]]; then
  rm -f $OUT
  exec 3>&1 4>&2 1>>$OUT 2>&1
fi

# Some intoduction words
welcome_step() {
  output -l -q "This script is an help for install mvmc on remote servers."
  output -l -q "You need 4 servers for install openstack nodes, 1 server for the manager node (gitlab, rest api, dns) and one empty puppet service up somewhere outside this 5 servers."
  output -l -q "Your remote servers need to be accessed by ssh with root user."
  confirm "Continue ?"
  echo -en "\n\n"
}

# Prerequisites
prerequisites() {
  local exteth=''
  local masqeth=''
  local publicnetwork=''
  local gateway_ip=''
  local startip=''
  local endip=''
  local mvmcuri=''
  local mvmcsuf=''
  local gitlaburi=''

  # temporary folder used by remote install
  rm -rf tmp/remote
  mkdir tmp/remote
  mkdir tmp/remote/os
  mkdir tmp/remote/mvmc

  # duplicate yaml for remote setting
  cp vagrant/os/hiera/os/uos* tmp/remote/os/
  cp vagrant/mvmc/hiera/mvmc/mvmc* tmp/remote/mvmc/
  cp vagrant/os/hiera/global.yaml.dist tmp/remote/os/global.yaml
  cp vagrant/mvmc/hiera/global.yaml.dist tmp/remote/mvmc/global.yaml
  cp vagrant/modules/pm/files/hosts/hosts tmp/remote/

  # prepare until 5 compute node hiera files
  pushd tmp/remote/os/ > /dev/null
  cp uosnv.yaml uosnv2.yaml && $BINSED -i "s/75/76/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv2.yaml
  cp uosnv.yaml uosnv3.yaml && $BINSED -i "s/75/77/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv3.yaml
  cp uosnv.yaml uosnv4.yaml && $BINSED -i "s/75/78/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv4.yaml
  cp uosnv.yaml uosnv5.yaml && $BINSED -i "s/75/79/;s/is_nv0: 'yes'/is_nv0: 'no'/" uosnv5.yaml
  popd > /dev/null

  # get the publicprefix
  output -q -l "The openstack public network (default is 192.168.71) ?"
  read publicprefix
  [[ -z "$publicprefix" ]] && publicprefix='192.168.71'

  # get the data prefix
  output -q -l "The openstack data network (default is 172.16.71) ?"
  read dataprefix
  [[ -z "$dataprefix" ]] && dataprefix='172.16.71'

  # get the api prefix
  output -q -l "The openstack api network (default is 192.168.70) ?"
  read apiprefix
  [[ -z "$apiprefix" ]] && apiprefix='192.168.70'

  # get the management prefix
  output -q -l "The openstack management network (default is 172.16.70) ?"
  read managementprefix
  [[ -z "$managementprefix" ]] && managementprefix='172.16.70'

  # the public network device
  output -q -l "The ethernet device associated on neutron to the openstack public network (default is eth1) ?"
  read exteth
  [[ -z "$exteth" ]] && exteth='eth1'

  # the external device
  output -q -l "The ethernet device associated to the default route on neutron ? (default is eth0)"
  read masqeth
  [[ -z "$masqeth" ]] && masqeth='eth0'

  # the local domain for the 5 mvmc servers
  output -q -l "The local domain for the 5 mvmc servers ? (default is nothing)"
  read DOMAIN
  [[ -z "$DOMAIN" ]] && DOMAIN='' 

  # the mvmc webui
  output -q -l "The manager mvmc uri ? (default is mvmc.${DOMAIN})"
  read mvmcuri
  [[ -z "$mvmcuri" ]] && mvmcuri="mvmc.$DOMAIN"

  # the gitlab webui
  output -q -l "The gitlab uri ? (default is gitlab.${DOMAIN})"
  read gitlaburi
  [[ -z "$gitlaburi" ]] && gitlaburi="gitlab.${DOMAIN}"

  # the common subdomain for vm endpoint
  output -q -l "The common wildcard subdomain for the vms ? (default is os.${DOMAIN})"
  read mvmcsuf
  [[ -z "$mvmcsuf" ]] && mvmcsuf="os.${DOMAIN}" 

  # get from input the puppetmaster ip
  output -q -l "Puppet-master public ip (for rsync modules and settings) ?"
  read PUPPETIP

  output -q -l "Puppet-master ip for agents network traffic (default is $PUPPETIP) ?"
  read PUPPETIP2
  [[ -z "$PUPPETIP2" ]] && PUPPETIP2="$PUPPETIP"

  output -q -l "Puppet-master fqdn ?"
  read PUPPETFQDN

  output -q -l "Puppet-master port (default is 8140) ?"
  read PUPPETPORT
  [[ -z "$PUPPETPORT" ]] && PUPPETPORT="8140"

  # create puppet.conf file
  cat > tmp/remote/puppet.conf << EOF
[main]
dns_alt_names=%%FQDNS%%
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
hiera_config=/etc/hiera.yaml
ordering=manifest

[master]
ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY

[agent]
server=${PUPPETFQDN}
masterport=${PUPPETPORT}
report=true
pluginsync=true
ssldir=/var/lib/puppet/sslagent
EOF


  # prepare global.yaml file
  # os part
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%DATAPREFIX%%;${dataprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%APIPREFIX%%;${apiprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${managementprefix};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%EXTDEV%%;${exteth};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%PUBDEV%%;${masqeth};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%NOVAHV%%;kvm;" tmp/remote/os/global.yaml
  $BINSED -i "s;%%MVMCURI%%;${mvmcuri};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%MVMCSUF%%;${mvmcsuf};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%GITLABURI%%;${gitlaburi};" tmp/remote/os/global.yaml
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};" tmp/remote/os/global.yaml
  # mvmc part
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%DATAPREFIX%%;${dataprefix};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%APIPREFIX%%;${apiprefix};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${managementprefix};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%MVMCURI%%;${mvmcuri};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%MVMCSUF%%;${mvmcsuf};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%GITLABURI%%;${gitlaburi};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};" tmp/remote/mvmc/global.yaml
  $BINSED -i "s;%%RAILSENV%%;production;" tmp/remote/mvmc/global.yaml  

  # merge the 2 global files
  cat tmp/remote/os/global.yaml tmp/remote/mvmc/global.yaml | sort | uniq > tmp/remote/global.yaml
  scp tmp/remote/global.yaml root@${PUPPETIP}:/var/lib/hiera/

  # prepare rails production config file
  cp ror/config/environments/production.rb.dist tmp/remote/mvmc/production.rb

  # prepare rails config file
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/mvmc/production.rb
  $BINSED -i "s;%%MVMCSUF%%;${mvmcsuf};" tmp/remote/mvmc/production.rb
  $BINSED -i "s;%%MVMCURI%%;${mvmcuri};" tmp/remote/mvmc/production.rb
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};" tmp/remote/mvmc/production.rb

  # prepare hosts file
  $BINSED -i "s;%%GITLABNS%%;${gitlaburi%%/*};" tmp/remote/hosts
  $BINSED -i "s;%%PUBPREFIX%%;${publicprefix};" tmp/remote/hosts
  $BINSED -i "s;%%APIPREFIX%%;${apiprefix};" tmp/remote/hosts
  $BINSED -i "s;%%MANAGEMENTPREFIX%%;${managementprefix};" tmp/remote/hosts
  $BINSED -i "s;%%DATAPREFIX%%;${dataprefix};" tmp/remote/hosts
  echo "${PUPPETIP2} ${PUPPETFQDN}" >> tmp/remote/hosts

  output -l -q "On controller openstack node, please configure this 3 private ips: ${managementprefix}.70, ${dataprefix}.70, ${apiprefix}.70"
  output -l -q "On neutron openstack node, please configure this 4 private ips: ${publicprefix}.71, ${managementprefix}.71, ${dataprefix}.71, ${apiprefix}.71"
  output -l -q "On glance openstack node, please configure this 2 private ips: ${managementprefix}.72, ${apiprefix}.72"
  output -l -q "On compute openstack node, please configure this 3 private ips: ${managementprefix}.75, ${dataprefix}.75, ${apiprefix}.75"
  output -l -q "On mvmc manager node, please configure this 3 private ips: ${publicprefix}.60, ${managementprefix}.60, ${apiprefix}.60"
  confirm "Waiting this installations are done ... Continue ?"
  echo -en "\n\n"
}

# update puppet modules
update_puppet_modules() {
  # backup actual fw files and puppet files
  rsync -avzPessh root@${PUPPETIP}:/etc/puppet/modules/pm/files/fw tmp/remote/
  rsync -avzPessh root@${PUPPETIP}:/etc/puppet/modules/pm/files/puppet tmp/remote/

  # clean puppet master
  ssh root@${PUPPETIP} 'rm -rf /etc/puppet/modules'

  # rsync puppet modules (rsync here but a git clone into puppet node should be better)
  rsync -avzPessh vagrant/modules root@${PUPPETIP}:/etc/puppet/
  # upload fw folder
  [[ -d tmp/remote/fw ]] && rsync -avzPessh tmp/remote/fw root@${PUPPETIP}:/etc/puppet/modules/pm/files/
  [[ -d tmp/remote/puppet ]] && rsync -avzPessh tmp/remote/puppet root@${PUPPETIP}:/etc/puppet/modules/pm/files/

  # rsync default hosts file
  rsync -avzPessh tmp/remote/hosts root@${PUPPETIP}:/etc/puppet/modules/pm/files/hosts/
  # change owner of puppet modules folder
  ssh root@${PUPPETIP} 'chown -R puppet: /etc/puppet/modules'
  # restart the puppet master daemon
  ssh root@${PUPPETIP} 'service puppetmaster restart'
}

# Upload puppet templates for openstack and manager install
remote_puppet() {
  
  output -q 'Working on remote puppet master'
  # install puppetmaster if we are on debian / ubuntu
  ssh root@${PUPPETIP} '[[ -f /etc/debian_version ]] && apt-get install puppetmaster'
  # clean puppet master
  ssh root@${PUPPETIP} 'rm -rf /var/lib/hiera && mkdir /var/lib/hiera'
  ssh root@${PUPPETIP} 'puppet cert clean --all'

  # create site.pp on remote puppet
  echo 'hiera_include("classes")' > tmp/remote/site.pp
  rsync -avzPessh tmp/remote/site.pp root@${PUPPETIP}:/etc/puppet/manifests/site.pp

  # create hiera.yml file
  cat > tmp/remote/hiera.yaml << EOF
---
:backends:
  - yaml
:yaml:
  :datadir: /var/lib/hiera
:hierarchy:
  - "%{clientcert}"
  - "%{environment}"
  - global
EOF
  rsync -avzPessh tmp/remote/hiera.yaml root@${PUPPETIP}:/etc/puppet/hiera.yaml
  scp tmp/remote/global.yaml root@${PUPPETIP}:/var/lib/hiera/
  
  update_puppet_modules
}

prepare_node() {
  # ip is the first parameter, fqdn the second
  local remote_ip="$1"
  local fqdn="$2"

  local fqdns=${fqdn%%\.*}
  local fwnodename="$fqdns"
  [[ "$fwnodename" = "uosnv"* ]] && fwnodename='uosnv'
  # if long fqdn exists, adding this to fqdns string
  [[ -n "$DOMAIN" ]] && fqdns="${fqdns},${fqdn}"

  output -q "Working on $fqdn node"

  # set the fqdn
  ssh root@${remote_ip} "hostname ${fqdn}; echo '127.0.0.1 ${fqdn}' > /etc/hosts; echo ${fqdn} > /etc/hostname"
  ssh root@${remote_ip} 'sed -i "s/^domain.*//;s/^search.*//" /etc/resolv.conf'
  [[ -n "$DOMAIN" ]] && ssh root@${remote_ip} "echo 'search $DOMAIN' >> /etc/resolv.conf"

  # set locale
  ssh root@${remote_ip} 'echo LANG=en_US.UTF-8 > /etc/default/locale'
  ssh root@${remote_ip} 'echo LC_ALL=en_US.UTF-8 >> /etc/default/locale'

  # add puppetmaster into hosts file
  ssh root@${remote_ip} "echo '${PUPPETIP2} ${PUPPETFQDN}' >> /etc/hosts"
  
  # reboot remote uosc
  ssh root@${remote_ip} "reboot"

  # reboot and get puppet repo
  confirm 'Server is going to reboot. Please waiting that he is up again and continue with puppet install'

  # apt-get update
  ssh root@${remote_ip} "apt-get update"

  # clean old cert
  ssh root@${remote_ip} "rm -rf /var/lib/puppet/sslagent"

  # install puppet agent
  ssh root@${remote_ip} "apt-get install -y --force-yes puppet"

  # allow puppet to start
  ssh root@${remote_ip} '[[ -f /etc/default/puppet ]] && sed -i "s;START=no;START=yes;" /etc/default/puppet'

  # puppet.conf file
  rsync -avzPessh tmp/remote/puppet.conf root@${remote_ip}:/etc/puppet/
  ssh root@${remote_ip} "/bin/sed -i 's/%%FQDNS%%/${fqdns}/' /etc/puppet/puppet.conf"

  # synchro fw and hosts file
  rsync -avzPessh vagrant/modules/pm/files/fw/fw_${fwnodename} root@${PUPPETIP}:/etc/puppet/modules/pm/files/fw/fw_${fqdn}
  ssh root@${PUPPETIP} "/bin/sed -i 's/%%PUBLICIP%%/${remote_ip}/;s/###PUBLICIP//' /etc/puppet/modules/pm/files/fw/fw_${fqdn}"
  rsync -avzPessh tmp/remote/hosts root@${PUPPETIP}:/etc/puppet/modules/pm/files/hosts/hosts_${fqdn}
  ssh root@${PUPPETIP} "/bin/sed -i 's;%%HOSTNAME%%;${fqdn};' /etc/puppet/modules/pm/files/hosts/hosts_${fqdn}"
}

# launch puppet agent on remote host
launch_puppetagent() {
  # ip is the first parameter, fqdn the second
  local remote_ip="$1"
  local fqdn="$2"

  # clean old cert if needed
  ssh root@${PUPPETIP} "puppet cert clean ${fqdn}"
  # enable puppet on the remote node and validate on puppetmaster
  ssh root@${remote_ip} 'puppet agent --test'
  sleep 3
  ssh root@${PUPPETIP} "puppet cert --allow-dns-alt-names sign ${fqdn}"
  ssh root@${remote_ip} 'puppet agent --enable'
  ssh root@${remote_ip} 'service puppet restart'

  output -q -l "Installation on $fqdn node begins, check the puppet-agent actions and continue after his work."

  confirm "Continue ?"
}

# make install process for one node
install_osnode() {
  # fqdn the function parameter
  local nodename="$1"
  local fwnodename="$1"
  local fqdn="$1"
  [[ -n "$DOMAIN" ]] && fqdn="${fqdn}.${DOMAIN}"
  [[ "$nodename" = "uosnv"* ]] && fwnodename='uosnv'

  # get the ip
  output -q -l "The ip for $fqdn controller node ?"
  read remote_ip
  
  # set local, hosts and install puppet
  prepare_node $remote_ip $fqdn

  # synchro hiera file
  scp tmp/remote/os/${nodename}.yaml root@${PUPPETIP}:/var/lib/hiera/${fqdn}.yaml
  
  # launch puppet-agent for start the installation
  launch_puppetagent $remote_ip $fqdn
}

# Install mvmc manager node
install_mvmc() {
  local fqdn='mvmc'
  local fqdnshort="$fqdn"
  [[ -n "$DOMAIN" ]] && fqdn="${fqdn}.${DOMAIN}"

  # get the ip
  output -q -l 'The ip for mvmc manager node ?'
  read remote_ip

  # update MVMCIP into production.rb
  $BINSED -i "s;%%MVMCIP%%;${remote_ip};" tmp/remote/mvmc/production.rb

  # copy puppet.conf onto puppetmaster files repository
  rsync -avzPessh tmp/remote/puppet.conf root@${PUPPETIP}:/etc/puppet/modules/pm/files/puppet/puppet.conf_${fqdn}
  ssh root@${PUPPETIP} "/bin/sed -i 's/%%FQDNSHORT%%/${fqdnshort}/' /etc/puppet/modules/pm/files/puppet/puppet.conf_${fqdn}"

  # setting local, hosts and install puppet
  prepare_node $remote_ip $fqdn

  # clone project into tmp folder
  mkdir tmp/mvmcgit
  pushd tmp/mvmcgit > /dev/null
  ssh root@${remote_ip} 'mkdir -p /home/mvmc'
  git clone --recursive git@github.com:ricofehr/mvmc.git .
  rsync -avzPessh . root@${remote_ip}:/home/mvmc/
  ssh root@${remote_ip} 'ln -sf /home/mvmc/puppet /puppet'
  ssh root@${remote_ip} 'ln -sf /home/mvmc/ror /ror'
  ssh root@${remote_ip} 'ln -sf /home/mvmc/out /out'
  ssh root@${remote_ip} 'ln -sf /home/mvmc/ror/hiera /hiera'
  popd > /dev/null
  rm -rf tmp/mvmcgit

  # rsync rails app (git clone on remote server should be better)
  rsync -avzPessh tmp/remote/mvmc/production.rb root@${remote_ip}:/ror/config/environments/

  # synchro hiera file
  scp tmp/remote/mvmc/mvmc.yaml root@${PUPPETIP}:/var/lib/hiera/${fqdn}.yaml

  # launch puppet-agent for start the installation
  launch_puppetagent $remote_ip $fqdn
}

welcome_step
prerequisites

output -l -q 'Remote puppet installation ? (y/n)'
read response
if [[ "$response" = "y" ]]; then
  remote_puppet
else
  output -l -q 'Update puppet modules ? (y/n)'
  read response
  [[ "$response" = "y" ]] && update_puppet_modules
fi

output -l -q 'Openstack controller installation ? (y/n)'
read response
[[ "$response" = "y" ]] && install_osnode uosc

output -l -q 'Openstack neutron installation ? (y/n)'
read response
[[ "$response" = "y" ]] && install_osnode uosnt

output -l -q 'Openstack glance installation ? (y/n)'
read response
[[ "$response" = "y" ]] && install_osnode uosst

output -l -q 'Openstack compute installation ? (y/n)'
read response
[[ "$response" = "y" ]] && install_osnode uosnv


output -l -q 'Other(s) compute installation ? (y/n)'
read response
if [[ "$response" = "y" ]]; then
  output -l -q 'A second compute ? (y/n)'
  read response
  [[ "$response" = "y" ]] && install_osnode uosnv2

  output -l -q 'A third compute ? (y/n)'
  read response
  [[ "$response" = "y" ]] && install_osnode uosnv3

  output -l -q 'A fourth compute ? (y/n)'
  read response
  [[ "$response" = "y" ]] && install_osnode uosnv4

  output -l -q 'A fifth compute ? (y/n)'
  read response
  [[ "$response" = "y" ]] && install_osnode uosnv5
fi

output -l -q 'Mvmc manager installation ? (y/n)'
read response
[[ "$response" = "y" ]] && install_mvmc
